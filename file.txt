# Инструкция для работы с Git и удалёнными репозиториями
 ## Обновление инструкции
### Что из себя представляет Git?
Git - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире. Данная программа разработана создателем ОС Линукс.
Git - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире. Данная программа разработана для ускорения работы среди программистов.

## Установка Git
Перейдите по ссылке https://git-scm.com/download/. Выберите вашу операционную систему и скачайте установочный пакет. Запустить файл установщика и выбрать параметри для какой платформы будет изучение (в нешем случае Visual studio defauly editor)

## Использование Git help 
Если у вас возникает вопрос по той или иной комманде, воспользуйтесь командой "git help" 
При использовании данной команды у вас появится список всех команд, которые вы можете использовать, при использовании GIT
Выберите необходимую функцию и используйте для дальнейшей работы.
Для работы с git, можно использовать и открытый доступ для уточнения, для чего команда требуется и примеры её использования

## Знакомство с Git 
Для начала работы с git необходимо представиться самому, для этого нужно указать ваше имя (логин) и вашу электронную почту.
Используя команды git config -- global user.name "Ваше имя", git config --global user.email "Ваш электронный адрес".


## Подготовка репозитория
Для создание репозитория необходимо выполнить команду *git init*  в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git)

## Создание коммитов

### Git add
Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите *git add <имя файла>*

### Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать *git status*, и Вы увидите были ли измения в файлах, или их не было.

### Создание коммитов
Для того, чтобы создать коммит(сохранение) необходимо выполнить команду *git commit*. Выполняется она так: *git commit -m "<сообщение к коммиту>*. Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту писать ***ОБЯЗАТЕЛЬНО***.

## Перемещение между сохранениями
Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она в папке с пепозиторием следующим образом: *git checkout <номер коммита>*

## Журнал изменений
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием

## Ветки в Git

### Создание ветки

Для того, чтобы создать ветку, используется команда *git branch*. Делается это следующим образом в папке с репозиторием: *git branch <название новой ветки>*

## Слияние веток

Для того чтобы дабавить ветку в текущую ветку используется команда *git merge <name branch>*

## Удаление веток
Для удаления ветки ввести команду "git branch -d 'name branch'"


## Совместная работа и обновление проектов

## Получение данных из удалённого репозитария Fetch и Pull
Для того чтобы связаться с удалённым репозитарием, необходимо воспользоваться командой "git fetch". Данная команда связывается с удалённым депозитрием и забирает все те данные, которых у вас ещё нет
Для отправки данных в удалённый репозитарий воспользуйтесь командой "git push", данная команда позволит вам поделиться своими наработками.


## Создание своего проекта и выкладывание его на GitHub
Создайте папку, где будет храниться ваш проект. Если ваш проект пустой, создайте новый файл и назовите его с расширением .html.После этого откроется окно редактирование этого файла. Напишите в нем ! и нажмите кнопку Tab . Автоматически должен сгенерироваться скелет пустой HTML страницы. Не забудьте нажать ctrl+s чтобы файл сохранился. 
После нажатия на кнопку Publish in GitHub. Во всплывающем окне выбирcете второй вариант или там где присутствует фраза ...public repositary. Выберите файлы для публикации и следуйте инструкциям входа на сайте GitHub.


## Сохранение результатов
Для сохранение изменений данных в markdown, всегда используйте сочетание клавишь Ctrl+s, иначе у вас не будут сохраняться, проделанная вами работа и вы потратите время в пустую.


## Вывод на удалённую работу 
Попытка номер 1 вывода на github
Используя функции git pull

 